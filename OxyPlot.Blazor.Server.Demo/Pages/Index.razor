@page "/"
@implements IDisposable
@using OxyPlot
@using OxyPlot.Axes
@using OxyPlot.Series
@using OxyPlot.Blazor
<h3>Blazored Oxy Plot Test</h3>
<BlazorPlotView @ref=@_view1 Width="100%" Height="300px" Model="_model1" Controller=@_c MouseOptimized="true"  RefreshTime="100"/>
<BlazorPlotView Width="100%" Height="300px" Model="_model2" ReverseMouseWheel=true />

@code {
    System.Timers.Timer _update = new System.Timers.Timer(1000);
    PlotController _c = new();
    BlazorPlotView? _view1;
    PlotModel? _model1;
    PlotModel? _model2;
    DataPoint[] _data = Array.Empty<DataPoint>();
    LineSeries? _line2;

    public static PlotModel BarSeries()
    {

        var model = new PlotModel
            {
                Title = "Cake Type Popularity",
                Subtitle = "Use 'I' and 'O' Keys to zoom, 'F1' resets zoom!",
            };
        //generate a random percentage distribution between the 5
        //cake-types (see axis below)
        var rand = new Random();
        double[] cakePopularity = new double[5];
        for (int i = 0; i < 5; ++i)
        {
            cakePopularity[i] = rand.NextDouble();
        }
        var sum = cakePopularity.Sum();

        model.Axes.Add(new LinearAxis { Key = "Value", Position = AxisPosition.Left, });
        var barSeries = new BarSeries
            {
                XAxisKey = "Value",
                YAxisKey = "CakeAxis",
                ItemsSource = new List<BarItem>(new[]
                            {
                new BarItem{ Value = (cakePopularity[0] / sum * 100) },
                new BarItem{ Value = (cakePopularity[1] / sum * 100) },
                new BarItem{ Value = (cakePopularity[2] / sum * 100) },
                new BarItem{ Value = (cakePopularity[3] / sum * 100) },
                new BarItem{ Value = (cakePopularity[4] / sum * 100) }
            }),
                LabelPlacement = LabelPlacement.Inside,
                LabelFormatString = "{0:.00}%",
                TrackerFormatString = "Hello {0} {1}",
                //TrackerKey = "x",
            };
        model.Series.Add(barSeries);
        model.Axes.Add(new CategoryAxis
            {
                Position = AxisPosition.Bottom,
                Key = "CakeAxis",
                ItemsSource = new[] {
                    "Apple cake",
                    "Baumkuchen",
                    "Bundt Cake",
                    "Chocolate cake",
                    "Carrot cake"
                    }
            });

        return model;
    }

    PlotModel BuildModel()
    {
        var model = new PlotModel { Title = "OxyPlot on Azure!" };
        var yAxis = new LinearAxis { Position = AxisPosition.Left, };   // , Minimum = -0.5, Maximum = 5.5,
        model.Axes.Add(yAxis);
        model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom });
        model.Series.Add(new FunctionSeries(Math.Sin, 0, 10, 1000));
        _line2 = new LineSeries();
        _line2.Title = "Linie 2";
        _line2.Color = OxyColors.Red;
        _data = Enumerable.Range(0, 100).Select(i => new DataPoint(i, 2)).ToArray();
        _line2.ItemsSource = _data;
        model.Series.Add(_line2);
        return model;
    }

    void UpdateData(object? sender, EventArgs e) => InvokeAsync(() =>
    {
        if (_update.Enabled && _model2 != null)
        {
            var random = new Random();
            var idx = random.Next(_data.Length);
            _data[idx] = new DataPoint(idx, random.NextDouble() * 5);
            _model2.InvalidatePlot(true);
        }
    });

    private static PlotController CreateController()
    {
        var controller = new PlotController();
        controller.InputCommandBindings.Clear();
        controller.BindMouseDown(OxyMouseButton.Left, OxyModifierKeys.None, 2, PlotCommands.ResetAt);
        controller.BindMouseDown(OxyMouseButton.Left, PlotCommands.ZoomRectangle);
        controller.BindMouseDown(OxyMouseButton.Right, PlotCommands.PanAt);
        controller.BindMouseWheel(PlotCommands.ZoomWheel);
        //controller.BindTouchDown(new DelegatePlotCommand<OxyTouchEventArgs>((view, controller, args) => controller.AddTouchManipulator(view, new MTouchManipulator(view), args)));
        return controller;

    }

    protected override void OnInitialized()
    {
        _c.UnbindAll();
        _c.BindMouseEnter(PlotCommands.HoverSnapTrack);
        _c.BindKeyDown(OxyKey.I, PlotCommands.ZoomIn);
        _c.BindKeyDown(OxyKey.O, PlotCommands.ZoomOut);
        _c.BindKeyDown(OxyKey.F1, PlotCommands.Reset);
        _c.BindMouseDown(OxyMouseButton.Left, OxyModifierKeys.None, 2, PlotCommands.ResetAt);
        _c.BindMouseDown(OxyMouseButton.Left, PlotCommands.ZoomRectangle);
        _c.BindMouseDown(OxyMouseButton.Right, PlotCommands.PanAt);
        _c.BindMouseWheel(PlotCommands.ZoomWheel);
  
        _model2 = BuildModel();
        _model1 = BarSeries();
        _update.Elapsed += UpdateData;
        _update.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && _view1 != null)
        {
            await _view1.FocusAsync();
        }
    }

    void IDisposable.Dispose()
    {
        _update.Elapsed -= UpdateData;
        _update.Dispose();
    }
}
